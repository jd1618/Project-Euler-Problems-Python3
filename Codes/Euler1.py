{"metadata":{"language_info":{"name":"python","version":"3.7.8","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Project Euler 1 (Multiples of 3 and 5):\n\nimport time\nstart = time.time()\n\ndef func(num):\n    sum = 0\n    for i in range(3, num): # <--- 3 is first no. to keep\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum\n\nprint(func(10000000)) # <--- sum of all multipled of 3 \n                  # <--- or 5 below 1000 is 233168\n    \nend = time.time()\nprint(end - start)","metadata":{"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"23333331666668\n1.2256929874420166\n","output_type":"stream"}]},{"cell_type":"code","source":"# Project Euler 1 approach 2:\n\nimport time\nstart = time.time()\n\ndef func(num):\n    return sum([i for i in range(3, num, 3)]) + \\\n        sum([i for i in range(5, num, 5) if i % 3 != 0])\n\nprint(func(10000000))\n\nend = time.time()\nprint(end - start)","metadata":{"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"23333331666668\n0.6346957683563232\n","output_type":"stream"}]},{"cell_type":"code","source":"# Project Euler 1 approach 3:\n\nimport time\nstart = time.time()\n\ndef func(num):\n    return sum({i for i in range(3, num, 3)}.union({i for i in range(5, num, 5)}))           \n\nprint(func(1000))\n\nend = time.time()\nprint(end - start)","metadata":{"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"233168\n0.0005862712860107422\n","output_type":"stream"}]},{"cell_type":"code","source":"# Project Euler 1 approach 4 (optimal):\n\nimport time \nstart = time.time()\n\n# Arithmetic progression:\ndef func(num, n):\n    p = (num - 1)//n # <--- // is floor division and rounds down after division\n    return p*(p + 1)//2\n\ndef lcm(a, b):\n    tmp = max(a, b)\n    lcm = 0\n    while lcm == 0:\n        if tmp % a == 0 and tmp % b == 0:\n            lcm += tmp\n            break\n        else:\n            tmp += 1\n    return lcm\n\n# Subtract by lcm sum to get rid of overlaps:\nprint(3*func(1e12, 3) + 5*func(1e12, 5) - lcm(3, 5)*func(1e12, 15)) \n\nend = time.time()\nprint(end - start)","metadata":{"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"233333333333166666285056\n0.0004112720489501953\n","output_type":"stream"}]},{"cell_type":"code","source":"def lcm(a, b):\n    tmp = max(a, b)\n    lcm = 0\n    while lcm == 0:\n        if tmp % a == 0 and tmp % b == 0:\n            lcm += tmp\n            break\n        else:\n            tmp += 1\n    return lcm\n\nlcm(3, 5)","metadata":{"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"15"},"metadata":{}}]}]}